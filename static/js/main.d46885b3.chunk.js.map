{"version":3,"sources":["Components/Button/Button.tsx","Utils/generateId.ts","Components/Button/index.ts","Utils/parseIntWithNaN.ts","Components/TextField/index.ts","Components/TextField/TextField.tsx","Components/Label/index.ts","Components/Label/Label.tsx","Components/Message/index.ts","Components/Message/Message.tsx","Components/Counter/index.ts","Components/Counter/Counter.tsx","Components/RootPage/index.ts","Components/RootPage/RootPage.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonVariant","ButtonSize","generateId","len","str","i","Math","floor","random","Button","props","title","size","variant","onClick","fullWidth","baseClassName","hoverClassName","Green","Red","Grey","Plus","Minus","pY","Small","Medium","Large","className","parseIntWithNaN","s","n","parseInt","isNaN","TextField","placeholder","onChange","value","type","Label","useState","isEditMode","setIsEditMode","labelText","setLabelText","e","target","Message","messageText","setMessageText","setClassName","useEffect","length","innerTimeout","timeout","setTimeout","clearTimeout","Counter","deleteThisCounter","count","setCount","newCountText","setNewCountText","incrementText","setIncrementText","increment","useRef","current","match","x","RootPage","counterIds","setCounterIds","map","id","index","newCounterIds","slice","concat","deleteCounterAt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iJAUYA,EAQAC,E,6DClBCC,EAAa,SAACC,GAIvB,IAHA,IAEIC,EAAM,GACDC,EAAI,EAAGA,EAAIF,EAAKE,IACrBD,GAJY,iEAIGE,KAAKC,MAHV,GAGgBD,KAAKE,WAEnC,OAAOJ,I,SDGCJ,K,cAAAA,E,UAAAA,E,YAAAA,E,YAAAA,E,eAAAA,M,cAQAC,K,cAAAA,E,gBAAAA,E,eAAAA,M,KAML,IEtBQQ,EFsB8B,SAACC,GAAW,IAC7CC,EAA6CD,EAA7CC,MAAOC,EAAsCF,EAAtCE,KAAMC,EAAgCH,EAAhCG,QAASC,EAAuBJ,EAAvBI,QAASC,EAAcL,EAAdK,UAEnCC,EAAgB,GAChBC,EAAiB,GACrB,OAAQJ,GACJ,KAAKb,EAAckB,MACfF,EAAgB,0BAChBC,EAAiB,qBACjB,MACJ,KAAKjB,EAAcmB,IACfH,EAAgB,wBAChBC,EAAiB,mBACjB,MACJ,KAAKjB,EAAcoB,KACfJ,EAAgB,yBAChBC,EAAiB,oBACjB,MACJ,KAAKjB,EAAcqB,KACfL,EAAgB,iDAChBC,EAAiB,oBACjB,MACJ,KAAKjB,EAAcsB,MACfN,EAAgB,+CAChBC,EAAiB,oBAIzB,IAAIM,EAAK,GACT,OAAQX,GACJ,KAAKX,EAAWuB,MACZD,EAAK,OACL,MACJ,KAAKtB,EAAWwB,OACZF,EAAK,OACL,MACJ,KAAKtB,EAAWyB,MACZH,EAAK,OAIb,OACI,qBAAKI,UAAS,WAAmB,IAAdZ,EAAqB,SAAW,GAArC,YAA2CQ,EAA3C,qEAA0GP,EAA1G,YAA2HC,GAAkBH,QAASA,EAApK,SACKH,K,OGnEAiB,EAAkB,SAACC,GAC5B,IAAMC,EAAIC,SAASF,GACnB,OAAOG,MAAMF,GAAK,EAAIA,GCDXG,ECSoC,SAACvB,GAAW,IACnDwB,EAAkDxB,EAAlDwB,YAAaC,EAAqCzB,EAArCyB,SAAUC,EAA2B1B,EAA3B0B,MAAOxB,EAAoBF,EAApBE,KAAMG,EAAcL,EAAdK,UAC5C,OACI,uBACIsB,KAAK,OACLH,YAAaA,EACbE,MAAOA,EACPD,SAAUA,EACVvB,KAAMA,EACNe,UAAS,kEAA0E,IAAdZ,EAAqB,SAAW,OClBlGuB,ECKgB,WAAO,IAAD,EACGC,oBAAkB,GADrB,mBAC1BC,EAD0B,KACdC,EADc,OAECF,mBAAiB,iBAFlB,mBAE1BG,EAF0B,KAEfC,EAFe,KAIjC,OAAIH,EAEI,sBAAKb,UAAU,+DAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,cAAC,EAAD,CAAWO,YAAY,UAAUE,MAAOM,EAAWP,SAAU,SAACS,GAAD,OAAOD,EAAaC,EAAEC,OAAOT,QAAQrB,WAAW,MAEjH,cAAC,EAAD,CAAQJ,MAAM,OAAOE,QAASb,EAAcoB,KAAMR,KAAMX,EAAWwB,OAAQX,QAAS,kBAAM2B,GAAc,SAMhH,sBAAKd,UAAU,oEAAf,UACI,qBAAKA,UAAU,WAAWb,QAAS,kBAAM2B,GAAc,IAAvD,SACKC,IAEL,qBAAKf,UAAU,2DAA2Db,QAAS,kBAAM2B,GAAc,IAAvG,SACI,cAAC,IAAD,UC1BDK,ECMgC,SAACpC,GAAW,IAC/CqC,EAAgCrC,EAAhCqC,YAAaC,EAAmBtC,EAAnBsC,eADiC,EAEpBT,mBAAiB,IAFG,mBAE/CZ,EAF+C,KAEpCsB,EAFoC,KAmBtD,OAfAC,qBAAU,WACN,GAAIH,EAAYI,OAAS,EAAG,CAExB,IAAIC,EADJH,EAAa,eAEb,IAAMI,EAAUC,YAAW,WACvBL,EAAa,sCACbG,EAAeE,YAAW,kBAAMN,EAAe,MAAK,OACrD,MACH,OAAO,WACHO,aAAaF,GACbE,aAAaH,OAGtB,CAACL,IAEG,qBAAKpB,UAAS,mCAA8BA,GAA5C,SAA0DoB,KCzBtDS,ECYgC,SAAC9C,GAAW,IAC/C+C,EAAsB/C,EAAtB+C,kBAD8C,EAG5BlB,mBAAiB,GAHW,mBAG/CmB,EAH+C,KAGxCC,EAHwC,OAIdpB,mBAAiB,IAJH,mBAI/CqB,EAJ+C,KAIjCC,EAJiC,OAKZtB,mBAAiB,KALL,mBAK/CuB,EAL+C,KAKhCC,EALgC,KAMhDC,EAAYC,iBAAe,GANqB,EAOhB1B,mBAAiB,sBAPD,mBAO/CQ,EAP+C,KAOlCC,EAPkC,KAStD,OACI,sBAAKrB,UAAU,yEAAf,UACI,qBAAKA,UAAU,0FAA0Fb,QAAS2C,EAAlH,SACI,cAAC,IAAD,MAEJ,qBAAK9B,UAAU,cAAf,SACI,cAAC,EAAD,MAEJ,sBAAKA,UAAU,iFAAf,UACI,cAAC,EAAD,CAASoB,YAAaA,EAAaC,eAAgBA,IACnD,qBAAKrB,UAAU,WAAf,SAA2B+B,OAE/B,sBAAK/B,UAAU,gDAAf,UACI,cAAC,EAAD,CAAQhB,MAAM,IAAIC,KAAMX,EAAWuB,MAAOX,QAASb,EAAcsB,MAAOR,QAAS,kBAAM6C,EAASD,EAAQM,EAAUE,YAClH,cAAC,EAAD,CAAQvD,MAAM,IAAIC,KAAMX,EAAWuB,MAAOX,QAASb,EAAcqB,KAAMP,QAAS,kBAAM6C,EAASD,EAAQM,EAAUE,eAErH,qBAAKvC,UAAU,cAAf,SACI,cAAC,EAAD,CACIhB,MAAM,gBACNC,KAAMX,EAAWwB,OACjBZ,QAASb,EAAcoB,KACvBN,QAAS,WACL6C,EAAS,GACTX,EAAe,iBAEnBjC,WAAW,MAGnB,sBAAKY,UAAU,6EAAf,UACI,qBAAKA,UAAU,OAAf,qBACA,cAAC,EAAD,CACIO,YAAY,GACZE,MAAOwB,EACPzB,SAAU,SAACS,GAEHA,EAAEC,OAAOT,MAAM+B,MADL,UACmBN,EAAgBjB,EAAEC,OAAOT,QAE9DxB,KAAM,IAEV,qBAAKe,UAAU,QACf,cAAC,EAAD,CACIhB,MAAM,MACNC,KAAMX,EAAWuB,MACjBX,QAASb,EAAcoB,KACvBN,QAAS,WACL,IAAMsD,EAAIxC,EAAgBgC,GAC1BD,EAASS,GACTpB,EAAe,kBAAD,OAAmBoB,IACjCP,EAAgB,UAI5B,sBAAKlC,UAAU,6EAAf,UACI,qBAAKA,UAAU,OAAf,wBACA,cAAC,EAAD,CACIO,YAAY,GACZE,MAAO0B,EACP3B,SAAU,SAACS,GAEHA,EAAEC,OAAOT,MAAM+B,MADL,UAEVJ,EAAiBnB,EAAEC,OAAOT,QAGlCxB,KAAM,IAEV,qBAAKe,UAAU,QACf,cAAC,EAAD,CACIhB,MAAM,MACNC,KAAMX,EAAWuB,MACjBX,QAASb,EAAcoB,KACvBN,QAAS,WACL,IAAMsD,EAAIxC,EAAgBkC,GAC1BE,EAAUE,QAAUE,EACpBpB,EAAe,oBAAD,OAAqBoB,cC9F5CC,ECKmB,WAAO,IAAD,EACA9B,mBAAmB,CAACrC,EAAW,MAD/B,mBAC7BoE,EAD6B,KACjBC,EADiB,KASpC,OACI,sBAAK5C,UAAU,2DAAf,UACI,wBAAQA,UAAU,oCAAlB,4BACA,sBAAKA,UAAU,oCAAf,UACK2C,EAAWE,KAAI,SAACC,EAAIC,GAAL,OACZ,cAAC,EAAD,CAAkBjB,kBAAmB,kBAX7B,SAACiB,GACrB,KAAIJ,EAAWnB,QAAU,GAAzB,CACA,IAAMwB,EAAgBL,EAAWM,MAAM,EAAGF,GAAOG,OAAOP,EAAWM,MAAMF,EAAQ,IACjFH,EAAcI,IAQyCG,CAAgBJ,KAA7CD,MAElB,cAAC,EAAD,CACI9D,MAAM,oBACNE,QAASb,EAAckB,MACvBN,KAAMX,EAAWyB,MACjBZ,QAAS,WACLyD,EAAc,GAAD,mBAAKD,GAAL,CAAiBpE,EAAW,iBCblD6E,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.d46885b3.chunk.js","sourcesContent":["import React from 'react'\n\ninterface ButtonProps {\n    title: string\n    variant: ButtonVariant\n    size: ButtonSize\n    onClick: () => void\n    fullWidth?: boolean\n}\n\nexport enum ButtonVariant {\n    Green = 'Green',\n    Red = 'Red',\n    Grey = 'Grey',\n    Plus = 'Plus',\n    Minus = 'Minus',\n}\n\nexport enum ButtonSize {\n    Small = 'Small',\n    Medium = 'Medium',\n    Large = 'Large',\n}\n\nexport const Button: React.FC<ButtonProps> = (props) => {\n    const { title, size, variant, onClick, fullWidth } = props\n\n    let baseClassName = ''\n    let hoverClassName = ''\n    switch (variant) {\n        case ButtonVariant.Green:\n            baseClassName = 'bg-green-400 text-white'\n            hoverClassName = 'hover:bg-green-500'\n            break\n        case ButtonVariant.Red:\n            baseClassName = 'bg-red-400 text-white'\n            hoverClassName = 'hover:bg-red-500'\n            break\n        case ButtonVariant.Grey:\n            baseClassName = 'bg-gray-400 text-white'\n            hoverClassName = 'hover:bg-gray-500'\n            break\n        case ButtonVariant.Plus:\n            baseClassName = 'bg-gray-600 text-green-300 text-3xl py-0 px-16'\n            hoverClassName = 'hover:bg-gray-700'\n            break\n        case ButtonVariant.Minus:\n            baseClassName = 'bg-gray-600 text-red-300 text-3xl py-0 px-16'\n            hoverClassName = 'hover:bg-gray-700'\n            break\n    }\n\n    let pY = ''\n    switch (size) {\n        case ButtonSize.Small:\n            pY = 'py-0'\n            break\n        case ButtonSize.Medium:\n            pY = 'py-1'\n            break\n        case ButtonSize.Large:\n            pY = 'py-2'\n            break\n    }\n\n    return (\n        <div className={`${fullWidth === true ? 'w-full' : ''} ${pY} px-4 cursor-pointer rounded shadow font-bold text-center ${baseClassName} ${hoverClassName}`} onClick={onClick}>\n            {title}\n        </div>\n    )\n}\n","export const generateId = (len: number): string => {\n    const choices = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n        options = 62\n    let str = ''\n    for (let i = 0; i < len; i++) {\n        str += choices[Math.floor(Math.random() * options)]\n    }\n    return str\n}\n","import { Button, ButtonSize, ButtonVariant } from './Button'\nexport { ButtonSize, ButtonVariant }\nexport default Button\n","export const parseIntWithNaN = (s: string): number => {\n    const n = parseInt(s)\n    return isNaN(n) ? 0 : n\n}\n","import { TextField } from './TextField'\nexport default TextField\n","import React from 'react'\n\ninterface TextFieldProps {\n    placeholder: string\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n    value: string\n    size?: number\n    fullWidth?: boolean\n}\n\nexport const TextField: React.FC<TextFieldProps> = (props) => {\n    const { placeholder, onChange, value, size, fullWidth } = props\n    return (\n        <input\n            type=\"text\"\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            size={size}\n            className={`bg-gray-400 rounded focus:outline-none px-2 text-white ${fullWidth === true ? 'w-full' : ''}`}\n        />\n    )\n}\n","import { Label } from './Label'\nexport default Label\n","import React, { useState } from 'react'\nimport { FaPen } from 'react-icons/fa'\n\nimport Button, { ButtonSize, ButtonVariant } from '../Button'\nimport TextField from '../TextField'\n\nexport const Label: React.FC = () => {\n    const [isEditMode, setIsEditMode] = useState<boolean>(false)\n    const [labelText, setLabelText] = useState<string>('Counter Title')\n\n    if (isEditMode) {\n        return (\n            <div className=\"w-full bg-gray-200 rounded flex justify-between items-center\">\n                <div className=\"text-2xl mr-6\">\n                    <TextField placeholder=\"Counter\" value={labelText} onChange={(e) => setLabelText(e.target.value)} fullWidth={true} />\n                </div>\n                <Button title=\"Save\" variant={ButtonVariant.Grey} size={ButtonSize.Medium} onClick={() => setIsEditMode(false)} />\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"w-full bg-gray-200 rounded flex justify-between items-center px-2\">\n            <div className=\"text-2xl\" onClick={() => setIsEditMode(true)}>\n                {labelText}\n            </div>\n            <div className=\"cursor-pointer text-xl text-gray-400 hover:text-gray-500\" onClick={() => setIsEditMode(true)}>\n                <FaPen />\n            </div>\n        </div>\n    )\n}\n","import { Message } from './Message'\nexport default Message\n","import React, { useEffect, useState } from 'react'\n\ninterface MessageProps {\n    messageText: string\n    setMessageText: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport const Message: React.FC<MessageProps> = (props) => {\n    const { messageText, setMessageText } = props\n    const [className, setClassName] = useState<string>('')\n\n    useEffect(() => {\n        if (messageText.length > 0) {\n            setClassName('opacity-100')\n            let innerTimeout: NodeJS.Timeout\n            const timeout = setTimeout(() => {\n                setClassName('opacity-0 transition duration-1000')\n                innerTimeout = setTimeout(() => setMessageText(''), 1000)\n            }, 1500)\n            return () => {\n                clearTimeout(timeout)\n                clearTimeout(innerTimeout)\n            }\n        }\n    }, [messageText])\n\n    return <div className={`text-green-400 font-bold ${className}`}>{messageText}</div>\n}\n","import { Counter } from './Counter'\nexport default Counter\n","import React, { useRef, useState } from 'react'\nimport { FaWindowClose } from 'react-icons/fa'\n\nimport { parseIntWithNaN } from '../../Utils/parseIntWithNaN'\nimport Button, { ButtonSize, ButtonVariant } from '../Button'\nimport Label from '../Label'\nimport Message from '../Message'\nimport TextField from '../TextField'\n\ninterface CounterProps {\n    deleteThisCounter: () => void\n}\n\nexport const Counter: React.FC<CounterProps> = (props) => {\n    const { deleteThisCounter } = props\n\n    const [count, setCount] = useState<number>(0)\n    const [newCountText, setNewCountText] = useState<string>('')\n    const [incrementText, setIncrementText] = useState<string>('1')\n    const increment = useRef<number>(1)\n    const [messageText, setMessageText] = useState<string>('New counter added!')\n\n    return (\n        <div className=\"w-96 bg-white mx-auto shadow flex flex-col items-center mb-6 px-6 py-4\">\n            <div className=\"cursor-pointer w-max ml-auto mb-4 -mt-2 -mr-3 text-xl text-gray-400 hover:text-gray-500\" onClick={deleteThisCounter}>\n                <FaWindowClose />\n            </div>\n            <div className=\"mb-3 w-full\">\n                <Label />\n            </div>\n            <div className=\"w-full flex justify-between items-center bg-gray-200 py-1 px-4 mb-3 rounded-lg\">\n                <Message messageText={messageText} setMessageText={setMessageText} />\n                <div className=\"text-5xl\">{count}</div>\n            </div>\n            <div className=\"w-full flex items-center justify-between mb-9\">\n                <Button title=\"-\" size={ButtonSize.Small} variant={ButtonVariant.Minus} onClick={() => setCount(count - increment.current)} />\n                <Button title=\"+\" size={ButtonSize.Small} variant={ButtonVariant.Plus} onClick={() => setCount(count + increment.current)} />\n            </div>\n            <div className=\"w-full mb-3\">\n                <Button\n                    title=\"Reset counter\"\n                    size={ButtonSize.Medium}\n                    variant={ButtonVariant.Grey}\n                    onClick={() => {\n                        setCount(0)\n                        setMessageText('Count reset!')\n                    }}\n                    fullWidth={true}\n                />\n            </div>\n            <div className=\"flex justify-center items-center w-full bg-gray-200 py-1 px-4 mb-3 rounded\">\n                <div className=\"mr-4\">Set to:</div>\n                <TextField\n                    placeholder=\"\"\n                    value={newCountText}\n                    onChange={(e) => {\n                        const regex = /^\\d*$/\n                        if (e.target.value.match(regex)) setNewCountText(e.target.value)\n                    }}\n                    size={8}\n                />\n                <div className=\"w-2\" />\n                <Button\n                    title=\"Set\"\n                    size={ButtonSize.Small}\n                    variant={ButtonVariant.Grey}\n                    onClick={() => {\n                        const x = parseIntWithNaN(newCountText)\n                        setCount(x)\n                        setMessageText(`Counter set to ${x}`)\n                        setNewCountText('')\n                    }}\n                />\n            </div>\n            <div className=\"flex justify-center items-center w-full bg-gray-200 py-1 px-4 mb-3 rounded\">\n                <div className=\"mr-4\">Increment:</div>\n                <TextField\n                    placeholder=\"\"\n                    value={incrementText}\n                    onChange={(e) => {\n                        const regex = /^\\d*$/\n                        if (e.target.value.match(regex)) {\n                            setIncrementText(e.target.value)\n                        }\n                    }}\n                    size={5}\n                />\n                <div className=\"w-2\" />\n                <Button\n                    title=\"Set\"\n                    size={ButtonSize.Small}\n                    variant={ButtonVariant.Grey}\n                    onClick={() => {\n                        const x = parseIntWithNaN(incrementText)\n                        increment.current = x\n                        setMessageText(`Increment set to ${x}`)\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import { RootPage } from './RootPage'\nexport default RootPage\n","import React, { useState } from 'react'\n\nimport { generateId } from '../../Utils/generateId'\nimport Button, { ButtonSize, ButtonVariant } from '../Button'\nimport Counter from '../Counter'\n\nexport const RootPage: React.FC = () => {\n    const [counterIds, setCounterIds] = useState<string[]>([generateId(10)])\n\n    const deleteCounterAt = (index: number): void => {\n        if (counterIds.length <= 1) return\n        const newCounterIds = counterIds.slice(0, index).concat(counterIds.slice(index + 1))\n        setCounterIds(newCounterIds)\n    }\n\n    return (\n        <div className=\"bg-blue-100 min-h-screen p-12 flex flex-col items-center\">\n            <header className=\"mb-8 text-4xl uppercase font-bold\">Online Counter</header>\n            <div className=\"w-full flex flex-col items-center\">\n                {counterIds.map((id, index) => (\n                    <Counter key={id} deleteThisCounter={() => deleteCounterAt(index)} />\n                ))}\n                <Button\n                    title=\"+ Add new counter\"\n                    variant={ButtonVariant.Green}\n                    size={ButtonSize.Large}\n                    onClick={() => {\n                        setCounterIds([...counterIds, generateId(10)])\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport RootPage from './Components/RootPage'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <RootPage />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}